# Utility Functions
## Run report
## Check for drift

from evidently.report import Report
from evidently.metrics.base_metric import generate_column_metrics
from evidently.metric_preset import DataDriftPreset
from evidently.metrics import *

#########################################
# Run report

def run_report(reference, current):
    """Run Evidently data drift report using reference and current dataframes."""
    report = Report(metrics=[
        DataDriftPreset(),
    ])

    report.run(reference_data=reference, current_data=current)

    return report

#########################################
# Check for drift

def get_indiv_metric_drift_cols(product, report_dict, drift_results_master, drift_type='prediction drift'):
        """Get names of drifted columns when not using an Evidently preset"""
        drifted_cols = []

        for result in report_dict()['metrics']:
            if result['result']['drift_detected'] == True:
                drifted_cols.append(f"{drift_type} - {product[1]} - {result['result']['column_name']}")

        drift_results_master.append(drifted_cols)

def check_for_drift(product, report, drift_results_master, drift_type='target drift'):
    """
    Description:
        Check for drift for a given non-commodity product.

    Inputs:
        product : list
        A list of attributes for a non-commodity product from a product dictionary.

        report : Report object
        Drift report generated by Evidently

        drift_results_master : list
        List of drift occurrences that have been recorded during the current job

        drift_type : str (default is 'target drift')
        Text to describe the current drift type being tested. Used to create more comprehensible output

    Output:
        Nothing returned explicitly; however, drift_results_master is updated if any drift is detected.
    
    """
    report_dict = report.as_dict()

    if report_dict['metrics'][0]['metric'] != 'DatasetDriftMetric':
       get_indiv_metric_drift_cols(product, report_dict, drift_results_master)

    if report_dict['metrics'][0]['result']['number_of_drifted_columns'] > 0:

        drifted_cols = []

        drift_data = report_dict['metrics'][1]['result']['drift_by_columns']

        for key in list(drift_data.keys()):
            if drift_data[key]['drift_detected'] == True:
                drifted_cols.append(f'{drift_type} - {product[1]} - {key}')

        drift_results_master.append(drifted_cols)


def raise_drift_exception(drift_results_master):
    """Raise Exception if drift has been detected during the current job run."""
    if len(drift_results_master) > 0:
        raise Exception(f"""
        The following columns have drifted: {drift_results_master}
        Manually run this notebook and uncomment `report.save_html("filename.html")`
        under the code that creates the report to view a formatted report.
        """)

#########################################
